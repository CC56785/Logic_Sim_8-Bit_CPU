// Test load immediate
li r0, 15
li r4, 45
li r6, -93

// zero all registers
add r1, r0, r0
add r2, r0, r0
add r3, r0, r0
add r4, r0, r0
add r5, r0, r0
add r6, r0, r0
add r7, r0, r0

// Setup initial values in r1–r5
addi r1, 20        // r1 = 20
addi r2, 10        // r2 = 10
addi r3, -5        // r3 = -5 (two's complement)
addi r4, 0xAA // r4 = 0xAA
addi r5, 0x55 // r5 = 0x55

// r6 = r1 + r2 = 30
add r6, r1, r2

// r7 = r1 - r2 = 10
sub r7, r1, r2

// r1 = r1 + (-5) = 15
add r1, r1, r3

// Bitwise AND of r4 and r5 → r2 = 0x00
and r2, r4, r5

// Bitwise OR of r4 and r5 → r3 = 0xFF
or r3, r4, r5

// Bitwise XOR of r4 and r5 → r6 = 0xFF
xor r6, r4, r5

// Immediate logic
// r4 = r4 & 0x0F → 0xAA & 0x0F = 0x0A
andi r4, 0x0F

// r5 = r5 | 0xF0 → 0x55 | 0xF0 = 0xF5
ori r5, 0xF0

// r3 = r3 ^ 0xFF → 0xFF ^ 0xFF = 0x00
xori r3, 0xFF

// Attempt to write to r0: should be ignored
addi r0, 123       // r0 stays 0
add r0, r1, r2     // still 0

// Use r0 in computation
// r7 = r7 + 0 = r7
add r7, r7, r0

// r6 = r6 ^ 0 = r6 (no change)
xor r6, r6, r0

// Test negative immediate
addi r1, -15       // r1 was 15, now 0
addi r1, -1        // r1 = -1

// Wraparound test (optional if you support 2's complement only)
// r2 = 127
addi r2, 127

// r2 = r2 + 1 → should become -128
addi r2, 1

// r1 = -1
// r2 = -128
// r3 = 0
// r4 = 10
// r5 = -11
// r6 = -1
// r7 = 10
